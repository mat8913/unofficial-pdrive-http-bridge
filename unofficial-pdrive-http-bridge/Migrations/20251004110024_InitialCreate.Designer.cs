// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using unofficial_pdrive_http_bridge;

#nullable disable

namespace unofficial_pdrive_http_bridge.Migrations
{
    [DbContext(typeof(ProgramDbContext))]
    [Migration("20251004110024_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.NodeMetadata", b =>
                {
                    b.Property<string>("VolumeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActiveRevisionId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFile")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT");

                    b.Property<long>("ModificationTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentNodeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("VolumeId", "NodeId");

                    b.HasIndex("VolumeId", "ParentNodeId");

                    b.ToTable("NodeMetadata");
                });

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.SecretsCacheGroup", b =>
                {
                    b.Property<bool>("Context_HasValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Context_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Context_Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueHolderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueHolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Secret_Context_HasValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Secret_Context_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret_Context_Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret_ValueHolderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret_ValueHolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret_ValueName")
                        .HasColumnType("TEXT");

                    b.HasKey("Context_HasValue", "Context_Name", "Context_Id", "ValueHolderName", "ValueHolderId", "ValueName", "Secret_Context_HasValue", "Secret_Context_Name", "Secret_Context_Id", "Secret_ValueHolderName", "Secret_ValueHolderId", "Secret_ValueName");

                    b.ToTable("SecretsCacheGroups");
                });

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.SecretsCacheSecret", b =>
                {
                    b.Property<bool>("Context_HasValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Context_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Context_Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueHolderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueHolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueName")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("SecretBytes")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Context_HasValue", "Context_Name", "Context_Id", "ValueHolderName", "ValueHolderId", "ValueName");

                    b.ToTable("SecretsCacheSecrets");
                });

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.Session", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsWaitingForSecondFactorCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PasswordMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SessionId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.SessionScope", b =>
                {
                    b.Property<string>("Scope")
                        .HasColumnType("TEXT");

                    b.HasKey("Scope");

                    b.ToTable("SessionScopes");
                });

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.TrackedFolder", b =>
                {
                    b.Property<string>("VolumeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeId")
                        .HasColumnType("TEXT");

                    b.HasKey("VolumeId", "NodeId");

                    b.ToTable("TrackedFolders");
                });

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.TrackedVolume", b =>
                {
                    b.Property<string>("VolumeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LatestEventId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VolumeId");

                    b.ToTable("TrackedVolumes");
                });

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.WebUiPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WebUiPasswords");
                });

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.NodeMetadata", b =>
                {
                    b.HasOne("unofficial_pdrive_http_bridge.DbModels.TrackedFolder", null)
                        .WithMany()
                        .HasForeignKey("VolumeId", "ParentNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("unofficial_pdrive_http_bridge.DbModels.TrackedFolder", b =>
                {
                    b.HasOne("unofficial_pdrive_http_bridge.DbModels.TrackedVolume", null)
                        .WithMany()
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
